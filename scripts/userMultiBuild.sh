#!/bin/bash
# 
# Launch build in various configuration settings to see differences between settings.
# You need to close gulp serve-dev / test / autotest prior to usage (because they break frontend build).

set +x

srcRoot="${REPOSITORY_PATH:-$(git rev-parse --show-toplevel)}"

# Make sure frontend has a build
cd ${srcRoot}/frontend
rm -rf build/
gulp build --novet


## Build DEBUG ##

# Make sure backend is clean
cd ${srcRoot}/backend/build
rm -rf AUTOGENERATED
rm -rf boost_1_60_0
rm -rf CMakeFiles
rm -rf GDCM-prefix
rm -rf jsoncpp-0.10.5
rm cmake_install.cmake
rm CmakeCache.txt
rm Makefile
rm UnitTests
rm libOsimisWebViewer*

# Launch build
cmake .. -DCMAKE_BUILD_TYPE=Debug -DALLOW_DOWNLOADS=ON -DSTANDALONE_BUILD=ON -DSTATIC_BUILD=ON
make -j2

# Copy files
mkdir ${srcRoot}/build-debug
rsync -av . ${srcRoot}/build-debug/


## Build DEBUG ##

# Make sure backend is clean
cd ${srcRoot}/backend/build
rm -rf AUTOGENERATED
rm -rf boost_1_60_0
rm -rf CMakeFiles
rm -rf GDCM-prefix
rm -rf jsoncpp-0.10.5
rm cmake_install.cmake
rm CmakeCache.txt
rm Makefile
rm UnitTests
rm libOsimisWebViewer*

# Launch build
cmake .. -DCMAKE_BUILD_TYPE=Release -DALLOW_DOWNLOADS=ON -DSTANDALONE_BUILD=ON -DSTATIC_BUILD=ON
make -j2

# Copy files
mkdir ${srcRoot}/build-release
rsync -av . ${srcRoot}/build-release/

