{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nWelcome !\n\n\nThis documentation aims to let you grasp the basics of the component based osimis web viewer. It is made of an user guide and several demo files wich are mainly based on the guide content. Those are presents in the app folder and can be tested in real time using \ngrunt serve\n or build using \ngrunt build\n.\n\n\nThe guide may be read in order.", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "Welcome !  This documentation aims to let you grasp the basics of the component based osimis web viewer. It is made of an user guide and several demo files wich are mainly based on the guide content. Those are presents in the app folder and can be tested in real time using  grunt serve  or build using  grunt build .  The guide may be read in order.", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-guide/wv-viewport/", 
            "text": "The viewport\n\n\nThe viewport has the responisibilty to show and manipulate an image.\n\n\nThe manipulations includes :\n\n\n\n\nzooming\n\n\ninverting colors\n\n\npanning\n\n\nscaling\n\n\nwindowing\n\n\n\n\nAs an input, the viewport uses an orthanc instance id. It may as well use a whole orthanc serie id though (see section \"Scroll through a serie\").\n\n\nShow a basic instance\n\n\n\n\n\n\nwv-viewport\n\n\n(attr) wv-instance: string (id)\n\n\n(attr) wv-enable-overlay: boolean\n\n\n\n\n\n\nTo show a dicom instance, use the \nwv-viewport\n directive.\n\n\nwv-viewport wv-instance=\n'ee5869df-a11c4629-0800f719-fce4b646-f207b5ac'\n!--\n\n you should not leave **any** caracter between opening and closing tags.\n\n--\n/wv-viewport\n\n\n\n!-- as for any angularjs directive, the ending tag is always required. --\n\n\n\n\n\n\nwv-instance\n is used to specify the remote instance id.\n\n\nAn overlay is enabled by default. It can be disabled by setting the parameter \nwv-enable-overlay\n to \nfalse\n.\n\n\nwv-viewport wv-instance=\nid\n wv-enable-overlay=\nfalse\n/wv-viewport\n\n\n!--\n- Notice the id value is this time a scope variable name instead of a plain value. \n- Also, although wv-enable-overlay can be set to true or false without the single quotes,\n  it can also be databinded to a scope value as well.\n--\n\n\n\n\n\nSpecify the viewport size\n\n\n\n\n\n\n(attr) wv-width: string ('auto', 'tag', '...px', '...em', aso.)\n\n\n(attr) wv-height: string ('auto', 'tag', '...px', '...em', aso.)\n\n\n(attr) wv-size-tag: void\n\n\n\n\n\n\nBy default, the size of the viewport equals the size of the first dicom image.\n\n\nwv-viewport wv-instance=\nid\n/wv-viewport\n\n\n!-- same as --\n\n\nwv-viewport wv-width=\n'auto'\n wv-height=\n'auto'\n/wv-viewport\n\n\n\n\n\nFor large image size, it is not convenient.\n\n\nwv-height\n and \nwv-width\n can be used to set a specific size in any standard css measure unit.\n\n\nwv-viewport wv-instance=\nid\n wv-width=\n'150px'\n wv-height=\n'150px'\n/wv-viewport\n\n\n\n\n\nThe \nauto\n keyword can be used to keep the image ratio.\n\n\n!-- wv-height equals wv-width * image-ratio --\n\n\nwv-viewport wv-instance=\nid\n wv-width=\n'150px'\n wv-height=\n'auto'\n/wv-viewport\n\n\n\n!-- wv-width equals wv-height / image-ratio --\n\n\nwv-viewport wv-instance=\nid\n wv-width=\n'auto'\n wv-height=\n'150px'\n/wv-viewport\n\n\n\n\n\nA special 'tag' mode allows you to fit the viewport in an ancestor element. The viewport width \n height will equals the element contaning the \nwv-size-tag\n. Note that at the moment, it only works when both the width \n the height are set to 'tag' together.\n\n\ndiv class=\nsome ancestor\n wv-size-tag\n\n    \ndiv class=\nsomeone else\n\n        \nwv-viewport wv-instance=\nid\n wv-width=\n'tag'\n wv-height=\n'tag'\n/wv-viewport\n\n    \n/div\n\n\n/div\n\n\n\n\n\nIn some rare case, you might want to recalculate the viewport size. This can be done using this standard jquery code.\n\n\n$(window).resize();\n\n\n\n\nAdd standard controls: Windowing, Panning \n Scaling\n\n\n\n\n\n\n(attr) wv-viewport-mouse-events: void\n\n\n\n\n\n\nThe viewport can obtain the following basic controls when \nwv-viewport-mouse-event\n is used :\n- windowing (left mouse click)\n- panning (middle mouse click)\n- scaling (right mouse click)\n\n\nwv-viewport wv-instance=\nid\n wv-viewport-mouse-events\n/wv-viewport\n\n\n\n\n\nScroll through a serie\n\n\n\n\n\n\n(attr) wv-viewport-serie: string (id)\n\n\n(attr) wv-scroll-on-wheel: boolean (enabled)\n\n\n\n\n\n\nwv-viewport-serie\n enable to scroll through a serie's instances using the mouse horizontal scrolling with the \nwv-scroll-on-wheel\n attribute set to true.\n\n\nNote: the \nwv-instance\n parameter is no longer needed.\n\n\nwv-viewport wv-viewport-serie=\nid\n wv-scroll-on-wheel=\ntrue\n/wv-viewport\n\n\n\n\n\nStandard controls can be used as well.\n\n\nwv-viewport wv-viewport-serie=\nid\n wv-viewport-mouse-events wv-scroll-on-wheel=\ntrue\n/wv-viewport\n\n\n\n\n\nNotice \nwv-viewport-serie\n isn't written using the same nomenclature as \nwv-instance\n. Unlike \nwv-instance\n, \nwv-viewport-serie\n is not a \nwv-viewport\n parameter but rather an extension of \nwv-viewport\n.", 
            "title": "The viewport"
        }, 
        {
            "location": "/user-guide/wv-viewport/#the-viewport", 
            "text": "The viewport has the responisibilty to show and manipulate an image.  The manipulations includes :   zooming  inverting colors  panning  scaling  windowing   As an input, the viewport uses an orthanc instance id. It may as well use a whole orthanc serie id though (see section \"Scroll through a serie\").", 
            "title": "The viewport"
        }, 
        {
            "location": "/user-guide/wv-viewport/#show-a-basic-instance", 
            "text": "wv-viewport  (attr) wv-instance: string (id)  (attr) wv-enable-overlay: boolean    To show a dicom instance, use the  wv-viewport  directive.  wv-viewport wv-instance= 'ee5869df-a11c4629-0800f719-fce4b646-f207b5ac' !--\n\n you should not leave **any** caracter between opening and closing tags.\n\n-- /wv-viewport  !-- as for any angularjs directive, the ending tag is always required. --   wv-instance  is used to specify the remote instance id.  An overlay is enabled by default. It can be disabled by setting the parameter  wv-enable-overlay  to  false .  wv-viewport wv-instance= id  wv-enable-overlay= false /wv-viewport  !--\n- Notice the id value is this time a scope variable name instead of a plain value. \n- Also, although wv-enable-overlay can be set to true or false without the single quotes,\n  it can also be databinded to a scope value as well.\n--", 
            "title": "Show a basic instance"
        }, 
        {
            "location": "/user-guide/wv-viewport/#specify-the-viewport-size", 
            "text": "(attr) wv-width: string ('auto', 'tag', '...px', '...em', aso.)  (attr) wv-height: string ('auto', 'tag', '...px', '...em', aso.)  (attr) wv-size-tag: void    By default, the size of the viewport equals the size of the first dicom image.  wv-viewport wv-instance= id /wv-viewport  !-- same as --  wv-viewport wv-width= 'auto'  wv-height= 'auto' /wv-viewport   For large image size, it is not convenient.  wv-height  and  wv-width  can be used to set a specific size in any standard css measure unit.  wv-viewport wv-instance= id  wv-width= '150px'  wv-height= '150px' /wv-viewport   The  auto  keyword can be used to keep the image ratio.  !-- wv-height equals wv-width * image-ratio --  wv-viewport wv-instance= id  wv-width= '150px'  wv-height= 'auto' /wv-viewport  !-- wv-width equals wv-height / image-ratio --  wv-viewport wv-instance= id  wv-width= 'auto'  wv-height= '150px' /wv-viewport   A special 'tag' mode allows you to fit the viewport in an ancestor element. The viewport width   height will equals the element contaning the  wv-size-tag . Note that at the moment, it only works when both the width   the height are set to 'tag' together.  div class= some ancestor  wv-size-tag \n     div class= someone else \n         wv-viewport wv-instance= id  wv-width= 'tag'  wv-height= 'tag' /wv-viewport \n     /div  /div   In some rare case, you might want to recalculate the viewport size. This can be done using this standard jquery code.  $(window).resize();", 
            "title": "Specify the viewport size"
        }, 
        {
            "location": "/user-guide/wv-viewport/#add-standard-controls-windowing-panning-scaling", 
            "text": "(attr) wv-viewport-mouse-events: void    The viewport can obtain the following basic controls when  wv-viewport-mouse-event  is used :\n- windowing (left mouse click)\n- panning (middle mouse click)\n- scaling (right mouse click)  wv-viewport wv-instance= id  wv-viewport-mouse-events /wv-viewport", 
            "title": "Add standard controls: Windowing, Panning &amp; Scaling"
        }, 
        {
            "location": "/user-guide/wv-viewport/#scroll-through-a-serie", 
            "text": "(attr) wv-viewport-serie: string (id)  (attr) wv-scroll-on-wheel: boolean (enabled)    wv-viewport-serie  enable to scroll through a serie's instances using the mouse horizontal scrolling with the  wv-scroll-on-wheel  attribute set to true.  Note: the  wv-instance  parameter is no longer needed.  wv-viewport wv-viewport-serie= id  wv-scroll-on-wheel= true /wv-viewport   Standard controls can be used as well.  wv-viewport wv-viewport-serie= id  wv-viewport-mouse-events wv-scroll-on-wheel= true /wv-viewport   Notice  wv-viewport-serie  isn't written using the same nomenclature as  wv-instance . Unlike  wv-instance ,  wv-viewport-serie  is not a  wv-viewport  parameter but rather an extension of  wv-viewport .", 
            "title": "Scroll through a serie"
        }, 
        {
            "location": "/user-guide/wv-overlay/", 
            "text": "The overlay\n\n\nThe overlay purpose is to show interesting stuffs about many things, including among others:\n\n\n\n\nDICOM instance tags\n\n\nDICOM serie tags\n\n\nviewport parameters (such as zoom, scale, ...)\n\n\n\n\nThe previous user guide section demonstrate how to show or hide the default viewport's overlay.\nThis section aims to explain how to configure it.\n\n\nThe wv-viewport content\n\n\nBy default, the \nwv-viewport\n shows a default overlay.\n\n\nwv-viewport wv-width=\nwidth\n wv-height=\nheight\n wv-instance=\ninstanceId\n/wv-viewport\n\n\n\n!-- same as --\n\n\n\nwv-viewport wv-width=\nwidth\n wv-height=\nheight\n wv-instance=\ninstanceId\n\n    \nwv-overlay\n/wv-overlay\n\n\n/wv-viewport\n\n\n\n\n\nAdding nested content to the directive replace the default overlay by anything you want.\n\n\n!-- useless customized overlay --\n\n\nwv-viewport wv-width=\nwidth\n wv-height=\nheight\n wv-instance=\ninstanceId\n\n    \nstyle\n\n    #topleft {\n        position: absolute;\n        top: 3px;\n        left: 3px;\n\n        background-color: yellow;\n        color: black;\n    }\n    #bottomright {\n        position: absolute;\n        bottom: 3px;\n        right: 3px;\n\n        background-color: orange;\n        color: white;\n    }\n    \n/style\n\n\n    \ndiv id=\ntopleft\n\n        Heee!\n    \n/div\n\n\n    \ndiv id=\nbottomright\n\n        Oooooh!\n    \n/div\n\n\n/wv-viewport\n\n\n\n\n\nAs you can see, the viewport is declared with the css \nposition: relative\n. Absolute positioning can thus be used to define viewport areas.\n\n\nThe following css classes can also be used to define areas \n(see wv-overlay.tpl.html source code)\n. \n\n\n\n\n.wv-overlay-topleft\n\n\n.wv-overlay-topright\n\n\n.wv-overlay-bottomleft\n\n\n.wv-overlay-bottomright\n\n\n\n\nAccessing the instance data\n\n\nYou might want to show interesting stuffs in your overlay.\nWeb Viewer Components use angular events to broadcast their informations to the overlay \n(see the wv-overlay.js source code to learn more)\n.\n\n\nwv-overlay\n listens to some of these events and defines the following scope objects :\n\n\n\n\n$instance (contains the dicom instance tags)\n\n\n$viewport (contains the viewport parameters, more informations: https://github.com/chafey/cornerstone/wiki/viewport)\n\n\n$serie (contains the dicom serie tags, provided by \nwv-viewport-serie\n)\n\n\n$instanceCount (the number of instance in the serie, require \nwv-viewport-serie\n as well)\n\n\n\n\nwv-overlay-scrollbar\n also adds a scrollbar to the bottom of the overlay.\n\n\n!-- usefull costumized overlay --\n\n\nwv-viewport wv-width=\nwidth\n wv-height=\nheight\n wv-viewport-serie=\nserieId\n wv-viewport-mouse-events wv-scroll-on-wheel=\ntrue\n\n    \nstyle\n\n    #bottomright2 {\n        position: absolute;\n        bottom: 3px;\n        right: 3px;\n\n        background-color: orange;\n        color: white;\n    }\n    \n/style\n\n\n    \nwv-overlay\n\n        \ndiv class=\nwv-overlay-topright\n\n            {{$instance.PatientName}}\n        \n/div\n\n\n        \ndiv id=\nbottomright2\n\n            wwwc: {{$viewport.voi.windowWidth}}/{{$viewport.voi.windowCenter}}\nbr/\n\n            zoom: {{$viewport.scale}}\n        \n/div\n\n\n        \n!-- one of a kind scrollbar --\n\n        \nwv-overlay-scrollbar\n/wv-overlay-scrollbar\n\n    \n/wv-overlay\n\n\n\n/wv-viewport\n\n\n\n!-- Note: the viewport default overlay can be shown this way as well --\n\n\nwv-viewport wv-width=\nwidth\n wv-height=\nheight\n wv-viewport-serie=\nserieId\n wv-scroll-on-wheel=\ntrue\n\n    \nwv-overlay\n/wv-overlay\n\n\n/wv-viewport", 
            "title": "The overlay"
        }, 
        {
            "location": "/user-guide/wv-overlay/#the-overlay", 
            "text": "The overlay purpose is to show interesting stuffs about many things, including among others:   DICOM instance tags  DICOM serie tags  viewport parameters (such as zoom, scale, ...)   The previous user guide section demonstrate how to show or hide the default viewport's overlay.\nThis section aims to explain how to configure it.", 
            "title": "The overlay"
        }, 
        {
            "location": "/user-guide/wv-overlay/#the-wv-viewport-content", 
            "text": "By default, the  wv-viewport  shows a default overlay.  wv-viewport wv-width= width  wv-height= height  wv-instance= instanceId /wv-viewport  !-- same as --  wv-viewport wv-width= width  wv-height= height  wv-instance= instanceId \n     wv-overlay /wv-overlay  /wv-viewport   Adding nested content to the directive replace the default overlay by anything you want.  !-- useless customized overlay --  wv-viewport wv-width= width  wv-height= height  wv-instance= instanceId \n     style \n    #topleft {\n        position: absolute;\n        top: 3px;\n        left: 3px;\n\n        background-color: yellow;\n        color: black;\n    }\n    #bottomright {\n        position: absolute;\n        bottom: 3px;\n        right: 3px;\n\n        background-color: orange;\n        color: white;\n    }\n     /style \n\n     div id= topleft \n        Heee!\n     /div \n\n     div id= bottomright \n        Oooooh!\n     /div  /wv-viewport   As you can see, the viewport is declared with the css  position: relative . Absolute positioning can thus be used to define viewport areas.  The following css classes can also be used to define areas  (see wv-overlay.tpl.html source code) .    .wv-overlay-topleft  .wv-overlay-topright  .wv-overlay-bottomleft  .wv-overlay-bottomright", 
            "title": "The wv-viewport content"
        }, 
        {
            "location": "/user-guide/wv-overlay/#accessing-the-instance-data", 
            "text": "You might want to show interesting stuffs in your overlay.\nWeb Viewer Components use angular events to broadcast their informations to the overlay  (see the wv-overlay.js source code to learn more) .  wv-overlay  listens to some of these events and defines the following scope objects :   $instance (contains the dicom instance tags)  $viewport (contains the viewport parameters, more informations: https://github.com/chafey/cornerstone/wiki/viewport)  $serie (contains the dicom serie tags, provided by  wv-viewport-serie )  $instanceCount (the number of instance in the serie, require  wv-viewport-serie  as well)   wv-overlay-scrollbar  also adds a scrollbar to the bottom of the overlay.  !-- usefull costumized overlay --  wv-viewport wv-width= width  wv-height= height  wv-viewport-serie= serieId  wv-viewport-mouse-events wv-scroll-on-wheel= true \n     style \n    #bottomright2 {\n        position: absolute;\n        bottom: 3px;\n        right: 3px;\n\n        background-color: orange;\n        color: white;\n    }\n     /style \n\n     wv-overlay \n         div class= wv-overlay-topright \n            {{$instance.PatientName}}\n         /div \n\n         div id= bottomright2 \n            wwwc: {{$viewport.voi.windowWidth}}/{{$viewport.voi.windowCenter}} br/ \n            zoom: {{$viewport.scale}}\n         /div \n\n         !-- one of a kind scrollbar -- \n         wv-overlay-scrollbar /wv-overlay-scrollbar \n     /wv-overlay  /wv-viewport  !-- Note: the viewport default overlay can be shown this way as well --  wv-viewport wv-width= width  wv-height= height  wv-viewport-serie= serieId  wv-scroll-on-wheel= true \n     wv-overlay /wv-overlay  /wv-viewport", 
            "title": "Accessing the instance data"
        }, 
        {
            "location": "/user-guide/wv-serielist/", 
            "text": "The serielist\n\n\nThe \nwv-serielist\n shows a vertical list of serie populated from a study. It provides a simple way to drag \n drop series into viewports.\n\n\nShow a basic serielist\n\n\n\n\n\n\nwv-serielist\n\n\n(attr) wv-study-id: string (id)\n\n\n\n\n\n\nShowing a \nwv-serielist\n is pretty straight forward.\n\n\nwv-serielist wv-study=\nstudyId\n/wv-serielist\n\n\n\n\n\nDrop serielist items into viewports\n\n\n\n\n\n\nwv-viewport\n\n\n(attr) wv-viewport-droppable: void\n\n\n(attr) wv-viewport-draggable: void\n\n\n\n\n\n\nwv-viewport-droppable\n attribute allows the \nwv-viewport\n to react to dropped \nwv-viewport\n.\n\nThe \nwv-serielist\n lists \nwv-viewport\n with \nwv-viewport-draggable\n attribute to allow the viewports to be drag \n dropped.\n\n\ndiv class=\nwv-container\n\n    \ndiv class=\nwv-menu\n\n        \nwv-serielist wv-study=\nstudyId\n/wv-serielist\n\n    \n/div\n\n    \ndiv class=\nwv-main\n style=\nbackground-color: orange\n wv-size-tag\n\n        \nwv-viewport wv-width=\n'tag'\n wv-height=\n'tag'\n \n            wv-viewport-serie wv-scroll-on-wheel=\ntrue\n wv-viewport-droppable\n        \n/wv-viewport\n\n    \n/div\n\n\n/div\n\n\n\n\n\nThere are several things to notice in this example :\n\n\n\n\nNeither \nwv-viewport-serie\n value nor \nwv-instance\n are defined. Those are not required in this case.\n\n\nSince no instance is provided to the viewport, it is \nimperative\n to define \nwv-width\n and \nwv-height\n. When not defined, the dropzone size will be 0px x 0px and will be unusable.\n\n\nThe webviewer contains css classes \n.wv-container\n, \n.wv-menu\n and \n.wv-main\n which may be used to set up a simple layout.", 
            "title": "The serielist"
        }, 
        {
            "location": "/user-guide/wv-serielist/#the-serielist", 
            "text": "The  wv-serielist  shows a vertical list of serie populated from a study. It provides a simple way to drag   drop series into viewports.", 
            "title": "The serielist"
        }, 
        {
            "location": "/user-guide/wv-serielist/#show-a-basic-serielist", 
            "text": "wv-serielist  (attr) wv-study-id: string (id)    Showing a  wv-serielist  is pretty straight forward.  wv-serielist wv-study= studyId /wv-serielist", 
            "title": "Show a basic serielist"
        }, 
        {
            "location": "/user-guide/wv-serielist/#drop-serielist-items-into-viewports", 
            "text": "wv-viewport  (attr) wv-viewport-droppable: void  (attr) wv-viewport-draggable: void    wv-viewport-droppable  attribute allows the  wv-viewport  to react to dropped  wv-viewport . The  wv-serielist  lists  wv-viewport  with  wv-viewport-draggable  attribute to allow the viewports to be drag   dropped.  div class= wv-container \n     div class= wv-menu \n         wv-serielist wv-study= studyId /wv-serielist \n     /div \n     div class= wv-main  style= background-color: orange  wv-size-tag \n         wv-viewport wv-width= 'tag'  wv-height= 'tag'  \n            wv-viewport-serie wv-scroll-on-wheel= true  wv-viewport-droppable\n         /wv-viewport \n     /div  /div   There are several things to notice in this example :   Neither  wv-viewport-serie  value nor  wv-instance  are defined. Those are not required in this case.  Since no instance is provided to the viewport, it is  imperative  to define  wv-width  and  wv-height . When not defined, the dropzone size will be 0px x 0px and will be unusable.  The webviewer contains css classes  .wv-container ,  .wv-menu  and  .wv-main  which may be used to set up a simple layout.", 
            "title": "Drop serielist items into viewports"
        }, 
        {
            "location": "/user-guide/wv-splitpane/", 
            "text": "The splitpane\n\n\nThe \nwv-splitpane\n provides a way to show multiple viewports at once. At the moment, it is meant to be used with viewport drag \n drop.\n\n\nShow a basic splitpane\n\n\n\n\n\n\nwv-splitpane\n\n\n(attr) wv-layout: object\n\n\nx: int\n\n\ny: int\n\n\n\n\n\n\n\n\n\n\nA basic example showing the creation of a 2x2 splitpane.\n\n\ndiv class=\nwv-container\n\n    \ndiv class=\nwv-menu\n\n        \nwv-serielist wv-study=\nstudyId\n/wv-serielist\n\n    \n/div\n\n    \ndiv class=\nwv-main\n\n        \nwv-splitpane wv-layout=\n{x: 2, y: 2}\n/wv-splitpane\n\n    \n/div\n\n\n/div\n\n\n\n\n\nConfigure the viewports\n\n\n\n\n\n\n(attr) wv-settings: object (\nsee the toolbar doc section\n or the wv-toolbar.js source file for more details)\n\n\nzoom: boolean\n\n\npan: boolean\n\n\ninvert: boolean\n\n\nlengthmeasure: boolean\n\n\nanglemeasure: boolean\n\n\npixelprobe: boolean\n\n\nellipticalroi: boolean\n\n\nrectangleroi: boolean\n\n\nlayout:\n\n\nx: int\n\n\ny: int\n\n\n\n\n\n\nplay: boolean\n\n\noverlay: boolean\n\n\n\n\n\n\n\n\n\n\nConfigure the viewports (advanced)\n\n\nTo acquire more control over the splitpane's viewports, you can override the transcluded template as well.\n\n\nThe index of the pane can be accessed through the scope properties \n$parent.$x\n and \n$parent.$y\n.\n\n\nEach splitpane's viewports are droppable by default. You might want to remove this behavior for instance. To achieve that, you have to remove the \nwv-viewport-droppable\n tag from the \nwv-viewport\n directive.\n\n\nThe following example show how to disable the drag \n drop and to use the specified serie ids instead. The first overlay is hidden.\n\n\ndiv class=\nwv-container\n ng-init=\nseries = {\n    0: '635faa23-fd8378ee-d03bce29-ee47c2fb-a65c5509',\n    1: '3ca69615-fcd4a4fb-e5f2cc9d-9c7a49a5-add98bbf'\n}\n\n    \nwv-splitpane wv-layout=\n{x: 2, y: 1}\n\n        \nwv-viewport wv-viewport-serie=\nseries[$parent.$x]\n wv-width=\n'tag'\n wv-height=\n'tag'\n\n            wv-viewport-mouse-events wv-scroll-on-wheel=\ntrue\n\n            wv-enable-overlay=\n$parent.$x != 0\n\n        \n/wv-viewport\n\n    \n/wv-splitpane\n\n\n/div\n\n\n\n\n\nNote this example is useless. Splitpanes should only be used when the number of viewport may dynamicaly changes. Two separate viewports could have been used instead.", 
            "title": "The splitpane"
        }, 
        {
            "location": "/user-guide/wv-splitpane/#the-splitpane", 
            "text": "The  wv-splitpane  provides a way to show multiple viewports at once. At the moment, it is meant to be used with viewport drag   drop.", 
            "title": "The splitpane"
        }, 
        {
            "location": "/user-guide/wv-splitpane/#show-a-basic-splitpane", 
            "text": "wv-splitpane  (attr) wv-layout: object  x: int  y: int      A basic example showing the creation of a 2x2 splitpane.  div class= wv-container \n     div class= wv-menu \n         wv-serielist wv-study= studyId /wv-serielist \n     /div \n     div class= wv-main \n         wv-splitpane wv-layout= {x: 2, y: 2} /wv-splitpane \n     /div  /div", 
            "title": "Show a basic splitpane"
        }, 
        {
            "location": "/user-guide/wv-splitpane/#configure-the-viewports", 
            "text": "(attr) wv-settings: object ( see the toolbar doc section  or the wv-toolbar.js source file for more details)  zoom: boolean  pan: boolean  invert: boolean  lengthmeasure: boolean  anglemeasure: boolean  pixelprobe: boolean  ellipticalroi: boolean  rectangleroi: boolean  layout:  x: int  y: int    play: boolean  overlay: boolean", 
            "title": "Configure the viewports"
        }, 
        {
            "location": "/user-guide/wv-splitpane/#configure-the-viewports-advanced", 
            "text": "To acquire more control over the splitpane's viewports, you can override the transcluded template as well.  The index of the pane can be accessed through the scope properties  $parent.$x  and  $parent.$y .  Each splitpane's viewports are droppable by default. You might want to remove this behavior for instance. To achieve that, you have to remove the  wv-viewport-droppable  tag from the  wv-viewport  directive.  The following example show how to disable the drag   drop and to use the specified serie ids instead. The first overlay is hidden.  div class= wv-container  ng-init= series = {\n    0: '635faa23-fd8378ee-d03bce29-ee47c2fb-a65c5509',\n    1: '3ca69615-fcd4a4fb-e5f2cc9d-9c7a49a5-add98bbf'\n} \n     wv-splitpane wv-layout= {x: 2, y: 1} \n         wv-viewport wv-viewport-serie= series[$parent.$x]  wv-width= 'tag'  wv-height= 'tag' \n            wv-viewport-mouse-events wv-scroll-on-wheel= true \n            wv-enable-overlay= $parent.$x != 0 \n         /wv-viewport \n     /wv-splitpane  /div   Note this example is useless. Splitpanes should only be used when the number of viewport may dynamicaly changes. Two separate viewports could have been used instead.", 
            "title": "Configure the viewports (advanced)"
        }, 
        {
            "location": "/user-guide/wv-toolbar/", 
            "text": "The toolbar\n\n\nThe \nwv-toolbar\n allow further interactions with the viewports, such as using measure tools, changing drawing modes, setting the splitpane layout, aso.\n\n\nShow a default toolbar connected to a splitpane\n\n\n\n\n\n\nwv-toolbar\n\n\n(attr) wv-items: object\n\n\n\n\n\n\nWhen \nwv-items\n is an empty object, all the toolbar items are shown.\n\n\n!-- show a splitpane connected to a default toolbar --\n\n\ndiv class=\nwv-container\n\n    \ndiv class=\nwv-menu\n\n        \nwv-serielist wv-study=\nstudyId\n/wv-serielist\n\n    \n/div\n\n    \ndiv class=\nwv-main\n ng-init=\ntoolbar = {}\n\n        \nwv-toolbar wv-items=\ntoolbar\n/wv-toolbar\n\n        \nwv-splitpane wv-settings=\ntoolbar\n/wv-splitpane\n\n    \n/div\n\n\n/div\n\n\n\n\n\nNote that the \nng-init=\"toolbar = {}\"\n is optional in this case. It is recommended to define the object due to angular scope issues.\n\n\nConfigure the toolbar\n\n\n\n\n\n\n(attr) wv-items: object\n\n\nzoom: boolean\n\n\npan: boolean\n\n\ninvert: boolean\n\n\nlengthmeasure: boolean\n\n\nanglemeasure: boolean\n\n\npixelprobe: boolean\n\n\nellipticalroi: boolean\n\n\nrectangleroi: boolean\n\n\nlayout:\n\n\nx: int\n\n\ny: int\n\n\n\n\n\n\nplay: boolean\n\n\noverlay: boolean\n\n\n\n\n\n\n\n\n\n\nWhen \nwv-items\n is not an empty object, only the set items are shown.\n\n\ndiv class=\nwv-container\n\n    \ndiv class=\nwv-menu\n\n        \nwv-serielist wv-study=\nstudyId\n/wv-serielist\n\n    \n/div\n\n    \ndiv class=\nwv-main\n ng-init=\ntoolbar = {\n            invert: true,\n            layout: {x: 1, y: 2}\n        }\n\n        \nwv-toolbar wv-items=\ntoolbar\n/wv-toolbar\n\n        \nwv-splitpane wv-settings=\ntoolbar\n/wv-splitpane\n\n    \n/div\n\n\n/div\n\n\n\n\n\nCreate your own toolbar\n\n\nAs the toolbar just manage a databinded object, you can easily create your own. \nThe following example shows a user defined 'overlay' button linked to the last splitpane viewport.\n\n\ndiv class=\nwv-container\n ng-init=\n\nlayout = {\n    x: 2,\n    y: 2\n};\nenableOverlay = true;\n\n\n    \ndiv class=\nwv-menu\n\n        \nwv-serielist wv-study=\nstudyId\n/wv-serielist\n\n    \n/div\n\n    \ndiv class=\nwv-main\n\n        \nbutton ng-click=\nenableOverlay = !enableOverlay\n style=\nheight: 40px; margin: 0;\ntoggle last overlay\n/button\n\n        \nwv-splitpane wv-layout=\nlayout\n style=\nheight: calc(100% - 40px); display:block;\n\n            \nwv-viewport wv-viewport-serie wv-width=\n'tag'\n wv-height=\n'tag'\n\n                wv-viewport-mouse-events wv-scroll-on-wheel=\ntrue\n wv-viewport-droppable\n                wv-enable-overlay=\n($parent.$y == layout.y - 1 \namp;\namp; $parent.$x == layout.x - 1) ? enableOverlay : true\n\n            \n/wv-viewport\n\n        \n/wv-splitpane\n\n    \n/div\n\n\n/div", 
            "title": "The toolbar"
        }, 
        {
            "location": "/user-guide/wv-toolbar/#the-toolbar", 
            "text": "The  wv-toolbar  allow further interactions with the viewports, such as using measure tools, changing drawing modes, setting the splitpane layout, aso.", 
            "title": "The toolbar"
        }, 
        {
            "location": "/user-guide/wv-toolbar/#show-a-default-toolbar-connected-to-a-splitpane", 
            "text": "wv-toolbar  (attr) wv-items: object    When  wv-items  is an empty object, all the toolbar items are shown.  !-- show a splitpane connected to a default toolbar --  div class= wv-container \n     div class= wv-menu \n         wv-serielist wv-study= studyId /wv-serielist \n     /div \n     div class= wv-main  ng-init= toolbar = {} \n         wv-toolbar wv-items= toolbar /wv-toolbar \n         wv-splitpane wv-settings= toolbar /wv-splitpane \n     /div  /div   Note that the  ng-init=\"toolbar = {}\"  is optional in this case. It is recommended to define the object due to angular scope issues.", 
            "title": "Show a default toolbar connected to a splitpane"
        }, 
        {
            "location": "/user-guide/wv-toolbar/#configure-the-toolbar", 
            "text": "(attr) wv-items: object  zoom: boolean  pan: boolean  invert: boolean  lengthmeasure: boolean  anglemeasure: boolean  pixelprobe: boolean  ellipticalroi: boolean  rectangleroi: boolean  layout:  x: int  y: int    play: boolean  overlay: boolean      When  wv-items  is not an empty object, only the set items are shown.  div class= wv-container \n     div class= wv-menu \n         wv-serielist wv-study= studyId /wv-serielist \n     /div \n     div class= wv-main  ng-init= toolbar = {\n            invert: true,\n            layout: {x: 1, y: 2}\n        } \n         wv-toolbar wv-items= toolbar /wv-toolbar \n         wv-splitpane wv-settings= toolbar /wv-splitpane \n     /div  /div", 
            "title": "Configure the toolbar"
        }, 
        {
            "location": "/user-guide/wv-toolbar/#create-your-own-toolbar", 
            "text": "As the toolbar just manage a databinded object, you can easily create your own. \nThe following example shows a user defined 'overlay' button linked to the last splitpane viewport.  div class= wv-container  ng-init= \nlayout = {\n    x: 2,\n    y: 2\n};\nenableOverlay = true; \n     div class= wv-menu \n         wv-serielist wv-study= studyId /wv-serielist \n     /div \n     div class= wv-main \n         button ng-click= enableOverlay = !enableOverlay  style= height: 40px; margin: 0; toggle last overlay /button \n         wv-splitpane wv-layout= layout  style= height: calc(100% - 40px); display:block; \n             wv-viewport wv-viewport-serie wv-width= 'tag'  wv-height= 'tag' \n                wv-viewport-mouse-events wv-scroll-on-wheel= true  wv-viewport-droppable\n                wv-enable-overlay= ($parent.$y == layout.y - 1  amp; amp; $parent.$x == layout.x - 1) ? enableOverlay : true \n             /wv-viewport \n         /wv-splitpane \n     /div  /div", 
            "title": "Create your own toolbar"
        }
    ]
}