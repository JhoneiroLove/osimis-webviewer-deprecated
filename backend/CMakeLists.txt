# Orthanc - A Lightweight, RESTful DICOM Store
# Copyright (C) 2012-2016 Sebastien Jodogne, Medical Physics
# Department, University Hospital of Liege, Belgium
# Copyright (C) 2016 OSIMIS SA
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


cmake_minimum_required(VERSION 2.8)

project(OsimisWebViewer)

include(${CMAKE_SOURCE_DIR}/Resources/CMake/GetProductVersionFromGitTag.cmake)

# Parameters of the build
set(BENCHMARK OFF CACHE BOOL "Send benchmark informations to stdout")
set(STATIC_BUILD ON CACHE BOOL "Static build of the third-party libraries (necessary for Windows)")
SET(STANDALONE_BUILD ON CACHE BOOL "Standalone build (all the resources are embedded, necessary for releases)")
set(ALLOW_DOWNLOADS ON CACHE BOOL "Allow CMake to download packages")
set(JS_CLIENT_PATH ${CMAKE_SOURCE_DIR}/../frontend/build)

if(EXISTS ${JS_CLIENT_PATH})
  # Set frontend version based on local build if available
  # when building inside the docker container, the frontend/build folder is already there and we don't want to override it.
  set(JS_FRONTEND_VERSION "LOCAL" CACHE STRING "the version of the frontend package to download")
elseif (${PRODUCT_VERSION_BRANCH} STREQUAL "master")
  # Set frontend version based on tag for master
  # @todo we'll have to adapt this if we use maintenance branch
  set(JS_FRONTEND_VERSION ${PRODUCT_VERSION_SHORT_STRING} CACHE STRING "the version of the frontend package to download")
else()
  # Set frontend version based on the branch for non-release version
  set(JS_FRONTEND_VERSION ${PRODUCT_VERSION_BRANCH} CACHE STRING "the version of the frontend package to download")
  # Make variable file-name compatible, to make it relate to the aws built front-end zip file
  string(REPLACE "/" "-" JS_FRONTEND_VERSION ${JS_FRONTEND_VERSION})
endif()

MESSAGE( STATUS "PRODUCT_VERSION_BRANCH:         " ${PRODUCT_VERSION_BRANCH} )
MESSAGE( STATUS "PRODUCT_VERSION_SHORT_STRING:   " ${PRODUCT_VERSION_SHORT_STRING} )
MESSAGE( STATUS "JS_FRONTEND_VERSION:            " ${JS_FRONTEND_VERSION} )

# Advanced parameters to fine-tune linking against system libraries
set(USE_SYSTEM_BOOST ON CACHE BOOL "Use the system version of Boost")
set(USE_SYSTEM_GDCM ON CACHE BOOL "Use the system version of Grassroot DICOM (GDCM)")
set(USE_SYSTEM_GOOGLE_TEST ON CACHE BOOL "Use the system version of Google Test")
set(USE_SYSTEM_JSONCPP ON CACHE BOOL "Use the system version of JsonCpp")
set(USE_SYSTEM_SQLITE ON CACHE BOOL "Use the system version of SQLite")
set(USE_SYSTEM_ORTHANC_SDK ON CACHE BOOL "Use the system version of the Orthanc plugin SDK")

# Distribution-specific settings
set(USE_GTEST_DEBIAN_SOURCE_PACKAGE OFF CACHE BOOL "Use the sources of Google Test shipped with libgtest-dev (Debian only)")
mark_as_advanced(USE_GTEST_DEBIAN_SOURCE_PACKAGE)

set(ORTHANC_ROOT ${CMAKE_SOURCE_DIR}/Orthanc)
include(CheckIncludeFiles)
include(CheckIncludeFileCXX)
include(CheckLibraryExists)
include(FindPythonInterp)
include(${CMAKE_SOURCE_DIR}/Orthanc/Resources/CMake/Compiler.cmake)
include(${CMAKE_SOURCE_DIR}/Orthanc/Resources/CMake/AutoGeneratedCode.cmake)
include(${CMAKE_SOURCE_DIR}/Orthanc/Resources/CMake/DownloadPackage.cmake)

#download the frontend lib
if(NOT ${JS_FRONTEND_VERSION} STREQUAL "LOCAL") 
  DownloadPackage(FALSE "http://orthanc.osimis.io/public/osimisWebViewer/${JS_FRONTEND_VERSION}.zip" ${JS_CLIENT_PATH} TRUE)
endif()

include(${CMAKE_SOURCE_DIR}/Orthanc/Resources/CMake/BoostConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Orthanc/Resources/CMake/GoogleTestConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Orthanc/Resources/CMake/JsonCppConfiguration.cmake)
include(${CMAKE_SOURCE_DIR}/Orthanc/Resources/CMake/SQLiteConfiguration.cmake)

include(${CMAKE_SOURCE_DIR}/Resources/CMake/GdcmConfiguration.cmake)

# Include GIL boost library - adobe version with numeric extensions
# Help debug boost GIL templates
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
  add_definitions(-DBOOST_GIL_USE_CONCEPT_CHECK=1)
endif()
include_directories(${CMAKE_SOURCE_DIR}/Dependencies/boost-1_60_0/)
include_directories(${CMAKE_SOURCE_DIR}/Dependencies/gil-2_1_1/)

# Enable image processing *generic* http routes on debug mode
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
  add_definitions(-DPLUGIN_ENABLE_DEBUG_ROUTE=1)
endif()

if (BENCHMARK)
  add_definitions(
    -DBENCHMARK=1
    )
  add_definitions(
      -DBOOST_CHRONO_HEADER_ONLY
      #-DBOOST_ERROR_CODE_HEADER_ONLY
    )

  # Fix boost chrono to work on mac X.11
  if (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    add_definitions(
      -D_DARWIN_C_SOURCE
    )
  endif()
endif()


# Check that the Orthanc SDK headers are available or download them
if (STATIC_BUILD OR NOT USE_SYSTEM_ORTHANC_SDK)
  include_directories(${ORTHANC_ROOT}/Sdk-1.1.0)
else ()
  CHECK_INCLUDE_FILE_CXX(orthanc/OrthancCPlugin.h HAVE_ORTHANC_H)
  if (NOT HAVE_ORTHANC_H)
    message(FATAL_ERROR "Please install the headers of the Orthanc plugins SDK")
  endif()
endif()


if (STANDALONE_BUILD)
  add_definitions(
    -DORTHANC_STANDALONE=1
    )
  set(EMBEDDED_RESOURCES
    WEB_VIEWER  ${JS_CLIENT_PATH}
    )
else()
  add_definitions(
    -DORTHANC_STANDALONE=0
    -DWEB_VIEWER_PATH="${JS_CLIENT_PATH}/"
    )
endif()

EmbedResources(
  ORTHANC_EXPLORER  ${CMAKE_SOURCE_DIR}/Resources/OrthancExplorer.js
  ${EMBEDDED_RESOURCES}
  )

add_definitions(
  -DORTHANC_SQLITE_STANDALONE=1
  )


if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux" OR
    ${CMAKE_SYSTEM_NAME} STREQUAL "kFreeBSD" OR
    ${CMAKE_SYSTEM_NAME} STREQUAL "FreeBSD")
  link_libraries(rt)
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
   list(APPEND PLUGIN_SOURCES  ${CMAKE_SOURCE_DIR}/Plugin/resources.rc)
endif()

if (APPLE)
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -framework CoreFoundation")
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -framework CoreFoundation")
endif()

add_definitions(
  -DORTHANC_ENABLE_MD5=0
  -DORTHANC_ENABLE_BASE64=0
  -DORTHANC_ENABLE_LOGGING=0
  )

include_directories(${CMAKE_SOURCE_DIR}/Plugin/)
include_directories(${CMAKE_SOURCE_DIR}/Plugin/Image)
include_directories(${CMAKE_SOURCE_DIR}/Plugin/Image/ImageContainer)
include_directories(${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy)
include_directories(${CMAKE_SOURCE_DIR}/Plugin/Image/Utilities)

# create an intermediary OsimisWebViewerObject to avoid source recompilation
# for both unit tests and web viewer library
add_library(OsimisWebViewerObject
  STATIC

  ${BOOST_SOURCES}
  ${SQLITE_SOURCES}
  ${JSONCPP_SOURCES}

  # Sources inherited from Orthanc core
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/ChunkedBuffer.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/Enumerations.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/FileStorage/FilesystemStorage.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/Images/ImageAccessor.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/Images/ImageBuffer.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/Images/ImageProcessing.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/MultiThreading/SharedMessageQueue.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/SQLite/Connection.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/SQLite/FunctionContext.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/SQLite/Statement.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/SQLite/StatementId.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/SQLite/StatementReference.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/SQLite/Transaction.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/Toolbox.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/Uuid.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/DicomFormat/DicomMap.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/DicomFormat/DicomTag.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/DicomFormat/DicomValue.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Core/DicomFormat/DicomArray.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Resources/ThirdParty/base64/base64.cpp

  # The following files depend on GDCM
  ${CMAKE_SOURCE_DIR}/Plugin/DecodedImageAdapter.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Plugins/Samples/GdcmDecoder/GdcmImageDecoder.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Plugins/Samples/GdcmDecoder/GdcmDecoderCache.cpp
  ${CMAKE_SOURCE_DIR}/Orthanc/Plugins/Samples/GdcmDecoder/OrthancImageWrapper.cpp
  
  ${CMAKE_SOURCE_DIR}/Plugin/OrthancContextManager.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/BaseController.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Instance/DicomRepository.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Series/SeriesFactory.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Series/SeriesRepository.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Series/Series.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Series/SeriesController.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/Utilities/KLVWriter.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageContainer/RawImageContainer.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageContainer/CompressedImageContainer.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageContainer/CornerstoneKLVContainer.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/CompositePolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/PixelDataQualityPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/HighQualityPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/MediumQualityPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/LowQualityPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/ResizePolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/Uint8ConversionPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/JpegConversionPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/PngConversionPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageProcessingPolicy/KLVEmbeddingPolicy.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/Image.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageMetaData.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageRepository.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/Image/ImageController.cpp
  
  ${CMAKE_SOURCE_DIR}/Plugin/BenchmarkHelper.cpp
  ${CMAKE_SOURCE_DIR}/Plugin/ViewerToolbox.cpp
  )
# bind OsimisWebViewerObject to GDCM & EmbeddedResources so any executable/library embedding 
# OsimisWebViewerObject.a also embed both.
if (STATIC_BUILD OR NOT USE_SYSTEM_GDCM)
  add_dependencies(OsimisWebViewerObject GDCM EmbeddedResourcesGenerator)
endif()
target_link_libraries(OsimisWebViewerObject ${GDCM_LIBRARIES})

# If using gcc, build OsimisWebViewerObject with the "-fPIC" argument to allow its
# embedding into the shared library containing the Orthanc plugin
if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux" OR
    ${CMAKE_SYSTEM_NAME} STREQUAL "FreeBSD" OR
    ${CMAKE_SYSTEM_NAME} STREQUAL "kFreeBSD")
  get_target_property(Flags OsimisWebViewerObject COMPILE_FLAGS)
  if(Flags STREQUAL "Flags-NOTFOUND")
    SET(Flags "-fPIC -ldl")
  else()
    SET(Flags "${Flags} -fPIC")
  endif()
  set_target_properties(OsimisWebViewerObject PROPERTIES
      COMPILE_FLAGS ${Flags})
  target_link_libraries(OsimisWebViewerObject -ldl)
endif()

# Create OsimisWebViewer dynamic library
add_library(OsimisWebViewer
  SHARED
  ${AUTOGENERATED_SOURCES}
  ${PLUGIN_SOURCES}
  ${CMAKE_SOURCE_DIR}/Plugin/Plugin.cpp
  )

add_dependencies(OsimisWebViewer OsimisWebViewerObject)
target_link_libraries(OsimisWebViewer OsimisWebViewerObject)

message("Setting the version of the library to ${PRODUCT_VERSION_SHORT_STRING}")

set_target_properties(OsimisWebViewer PROPERTIES
    VERSION ${PRODUCT_VERSION_SHORT_STRING}
    SOVERSION ${PRODUCT_VERSION_SHORT_STRING})

install(
  TARGETS OsimisWebViewer
  RUNTIME DESTINATION lib                      # Destination for Windows
  LIBRARY DESTINATION share/orthanc/plugins    # Destination for Linux
  )

# Create OsimisWebViewer unit tests
add_executable(UnitTests
  ${GTEST_SOURCES}
  ${JSONCPP_SOURCES}
  ${CMAKE_SOURCE_DIR}/UnitTestsSources/UnitTestsMain.cpp
  )
add_dependencies(UnitTests OsimisWebViewerObject)
target_link_libraries(UnitTests OsimisWebViewerObject)
