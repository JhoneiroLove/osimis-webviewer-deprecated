/**
 * @ngdoc directive
 *
 * @name wvConfiguration
 *
 * @restrict A
 *
 * @description
 * The `wvConfig` directive let the user define the general settings of the web viewer.
 * It is meant to be used as an HTML attribute, anywhere the user want the settings to apply.
 *
 * A directive is used for configuration instead of the standard services to let the configuration
 * be scoped and enable multiple configurations in different contexts. This is required for instance
 * by lify which use two different instances of web viewers and therefore cannot apply some configurations
 * at global scale.
 *
 * @example
 * See unit tests for examples..
 *
 */
(function() {
    'use strict';

    angular
        .module('webviewer')
        .directive('wvConfiguration', wvConfiguration);

    /* @ngInject */
    function wvConfiguration($parse) {
        var directive = {
            require: {
                configuration: 'wvConfiguration'
            },
            controller: Controller,
            link: link,
            restrict: 'A',
            // @note use $parse to try to not dirty the scope
            scope: false
        };
        return directive;

        function link(scope, element, attrs, ctrls) {
            // Function to configure the new values and resets the default ones
            // @note this doesn't change the configuration object reference
            // @note the directive controller is the configuration object
            function configure(newConfig) {
                ctrls.configuration.httpRequestPolicy = newConfig.httpRequestPolicy || angular.noop;
            }

            // Init default configuration
            configure({});

            // Update the configuration based on the `wv-configuration` attribute
            var wvConfigurationParser = $parse(attrs.wvConfiguration);
            scope.$watchCollection(wvConfigurationParser, function(newConfiguration) {
                configure(newConfiguration);
            });
        }
    }

    /* @ngInject */
    function Controller($attrs) {
        this.httpRequestPolicy = angular.noop;
    }
})();