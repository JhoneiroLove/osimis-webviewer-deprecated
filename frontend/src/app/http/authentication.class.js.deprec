/**
 * @ngdoc overview
 * 
 * @name Authentification
 * 
 * @description
 * WebViewer is not responsible for authentification. However, it is quite often embedded behind a proxy.
 * It's therefore convenient to provide the additional user informations to the proxy. The `osimis.Authentification`
 * class is used to retrieve an user token from a cookie.
 * 
 * To use authentification, the web viewer has to be used on the same domain as the cookie of the original application.
 * This is often achieved using a reverse proxy.
 *
 * The cookie has to be named 'WebViewerAuthToken'.
 * The headers used to check authentification has to be 'WebViewerAuthToken' as well.
 *
 * This class is for internal use only. However, the host application has to make sure the cookie is always valid.
 * 
 * If the token expires while the web viewer is being used, the end user will have to reload the page.
 * @todo we could fix this using a communication layer for iframe inter-communication.
 */
(function(module) {

    /**
     * @class
     * 
     * Bind webviewer to external application's authentification.
     */
    function Authentification() {
        this.cookieName = 'WebViewerAuthToken';
        this.headerName = 'WebViewerAuthToken';

        // Regex used to retrieve the value of `this.cookieName`.
        // Stored here for performance reasons.
        this.cookieRegex = new RegExp('(?:(?:^|.*;\\s*)'+this.cookieName+'\\s*\\=\\s*([^;]*).*$)|^.*$');
    }

    /**
     * @description
     * Retrieve Http Headers used for authentification from cookies.
     * To avoid issue related to token refresh, this method should not be cached and be called before each requests.
     * 
     * @return {object} HTTP headers as an object
     *    Only provide one header: 'WebViewerAuthToken'
     */
    Authentification.prototype.getHttpHeaders = function() {
        // @warning this makes user sessions unsafe over XSS exploit.

        // Retrieve the value from the cookie
        var cookieValue = document.cookie.replace(this.cookieRegex, '$1');

        // Create a header object containing cookie value.
        var headers = {};
        headers[this.headerName] = cookieValue;

        return headers;
    };

    module.Authentification = Authentification;

})(typeof WorkerGlobalScope !== 'undefined' ?
    (WorkerGlobalScope.osimis || (WorkerGlobalScope.osimis = {})) // use osimis module on workers
    : (window.osimis || (window.osimis = {})) // use osimis module on main thread
);