.wvToolbar {
    position: absolute;
}

.wvToolbar--top {
    top: 0;
    height: $toolbarHeight;

    // Position the toolbar to the right (even if it's positioned
    // horizontally).
    right: 0;
    text-align: right;

    // Allow user to scroll through the toolbar if screen is too small. Note we
    // can't use z-index properly to show buttons on top of the viewer, as any
    // popover will appear behind them (even with higher z-index) due to an
    // overflow property hidden somewhere.
    overflow-y: auto;
    overflow-x: visible;
    white-space: nowrap;
    max-width: 100%;
}

.wvToolbar--right {
    right: 0;
    width: 32px; // != $toolbarHeight since we're in the reverse order.

    // Allow user to scroll through the toolbar if screen is too small. 
    overflow-x: auto;
    overflow-y: visible;
    height: 100%;
}

.wvToolbar--right .wvButton--rotate, .wvToolbar--right .wvButton--rotate.fa { // make sure we have more precedence than .fa class
    // Align rotated button position when toolbar is positioned at right.
    left: -5px;
    top: 5px;
    min-width: 42px;
}

.wvToolbar__splitpaneConfigPopover {
    // Prevent white space between buttons.
    font-size: 0;
}

.wvToolbar__splitpaneConfigButton {
    @extend .wvButton;

    // Set black text on white background.
    color: hsl(0, 0%, 9%);
    &:hover, &:focus, &.active {
        color: black;
    }
}
.wvToolbar__splitpaneConfigButton--rotate {
    @extend .wvToolbar__splitpaneConfigButton;

    // Rotate icon.
    transform: rotate(90deg);
    width: 42px;
    height: 32px;
    line-height: 32px;
    // padding: 0 0 0 13px;

    left: -5px;
    top: 1px;
    margin-right: -10px;
}
input[type="radio"].wvToolbar__splitpaneConfigButtonInput {
    // Hide the radio input, but make it fit the label, so we can rely on its 
    // html caracteristics without having to suffer from its design.
    position: absolute;
    width: 0;
    height: 0;
    left: 0;
    top: 0;
    bottom: 2px;
    right: 0;
    opacity: 0;
}